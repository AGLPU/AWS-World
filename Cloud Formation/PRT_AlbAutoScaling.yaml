AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy Nginx Web Server on Ubuntu with ASG, ALB, and S3 Private Access'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC for deployment.

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets for the ALB and ASG.

  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'

Resources:

  ## Security Group for EC2 Instances
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow internal traffic for instances"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ## IAM Role for EC2 Instances to Access S3 Privately
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:PutObject"
                Resource: "arn:aws:s3:::aman-goel-prod-1/*"

  S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3AccessRole

  ## Launch Template for Auto Scaling Group
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId  # Ubuntu 22.04 (Change if needed)
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt S3InstanceProfile.Arn
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeleteOnTermination: true
            DeviceIndex: 0
            SubnetId: !Select [ 0, !Ref SubnetIds ]
            Groups:
              - !Ref WebServerSG
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt update -y
            apt install -y nginx aws-cli
            systemctl start nginx
            systemctl enable nginx
            echo "<h1>Welcome to Nginx on ASG</h1>" > /var/www/html/index.html

  ## Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ## Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: nginx-alb
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref WebServerSG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup



  ## Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 10
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref TargetGroup

  ## Scaling Policies
  ScaleUpPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 60

  ScaleUpPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 2
      Cooldown: 60

  ScaleUpPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 3
      Cooldown: 60

  ScaleUpPolicy4:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 5
      Cooldown: 60

  ## CloudWatch Alarms for Scaling
  CPUAlarm50:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up when CPU usage >= 50%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy1

  CPUAlarm70:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up when CPU usage >= 70%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy2

  CPUAlarm90:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up when CPU usage >= 90%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 90
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy3

  CPUAlarm95:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up when CPU usage >= 95%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 95
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy4

Outputs:
  LoadBalancerDNS:
    Description: "ALB DNS Name"
    Value: !GetAtt LoadBalancer.DNSName
